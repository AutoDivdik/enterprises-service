// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const getAll = `-- name: GetAll :many

SELECT e.id,
       e.name,
       country,
       maintenanceYear,
       phone,
       fax,
       t.id   as "type_of_ownership_id",
       t.name as "type_of_ownership_name"
FROM "enterprises".enterprises e
         JOIN "enterprises".types_of_ownership t ON e.type_of_ownership_id = t.id
`

type GetAllRow struct {
	ID                  uuid.UUID `json:"id"`
	Name                string    `json:"name"`
	Country             string    `json:"country"`
	Maintenanceyear     int32     `json:"maintenanceyear"`
	Phone               string    `json:"phone"`
	Fax                 string    `json:"fax"`
	TypeOfOwnershipID   uuid.UUID `json:"type_of_ownership_id"`
	TypeOfOwnershipName string    `json:"type_of_ownership_name"`
}

func (q *Queries) GetAll(ctx context.Context) ([]GetAllRow, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRow
	for rows.Next() {
		var i GetAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Country,
			&i.Maintenanceyear,
			&i.Phone,
			&i.Fax,
			&i.TypeOfOwnershipID,
			&i.TypeOfOwnershipName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnterpriseByID = `-- name: GetEnterpriseByID :one

SELECT e.id,
       e.name,
       country,
       maintenanceYear,
       phone,
       fax,
       t.id   as "type_of_ownership_id",
       t.name as "type_of_ownership_name"
FROM "enterprises".enterprises e
         JOIN "enterprises".types_of_ownership t ON e.type_of_ownership_id = t.id
WHERE e.id = $1 LIMIT 1
`

type GetEnterpriseByIDRow struct {
	ID                  uuid.UUID `json:"id"`
	Name                string    `json:"name"`
	Country             string    `json:"country"`
	Maintenanceyear     int32     `json:"maintenanceyear"`
	Phone               string    `json:"phone"`
	Fax                 string    `json:"fax"`
	TypeOfOwnershipID   uuid.UUID `json:"type_of_ownership_id"`
	TypeOfOwnershipName string    `json:"type_of_ownership_name"`
}

func (q *Queries) GetEnterpriseByID(ctx context.Context, id uuid.UUID) (GetEnterpriseByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getEnterpriseByID, id)
	var i GetEnterpriseByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.Maintenanceyear,
		&i.Phone,
		&i.Fax,
		&i.TypeOfOwnershipID,
		&i.TypeOfOwnershipName,
	)
	return i, err
}
